// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BusinessObject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BusinessObject.Entity.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("BusinessObject.Entity.AppointmentDetails", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("AppointmentId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentDetails");
                });

            modelBuilder.Entity("BusinessObject.Entity.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("BusinessObject.Entity.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("BusinessObject.Entity.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Non-Description",
                            Expiration = new DateTime(2026, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            IsDelete = false,
                            MedicineName = "Abacavir Sulfate",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Non-Description",
                            Expiration = new DateTime(2026, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            IsDelete = false,
                            MedicineName = "Acular",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Non-Description",
                            Expiration = new DateTime(2026, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            IsDelete = false,
                            MedicineName = "Adcirca",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Non-Description",
                            Expiration = new DateTime(2026, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            IsDelete = false,
                            MedicineName = "Betagan",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Non-Description",
                            Expiration = new DateTime(2026, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            IsDelete = false,
                            MedicineName = "Blocadren",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Non-Description",
                            Expiration = new DateTime(2026, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            IsDelete = false,
                            MedicineName = "Caverject",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Non-Description",
                            Expiration = new DateTime(2026, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            IsDelete = false,
                            MedicineName = "Copaxone",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Non-Description",
                            Expiration = new DateTime(2026, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            IsDelete = false,
                            MedicineName = "DesOwen",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Non-Description",
                            Expiration = new DateTime(2026, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            IsDelete = false,
                            MedicineName = "DesOwen",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Non-Description",
                            Expiration = new DateTime(2026, 12, 28, 9, 53, 13, 811, DateTimeKind.Utc).AddTicks(2082),
                            IsDelete = false,
                            MedicineName = "Fludara",
                            Price = 2000m
                        });
                });

            modelBuilder.Entity("BusinessObject.Entity.Nurse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Nurse");
                });

            modelBuilder.Entity("BusinessObject.Entity.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("BusinessObject.Entity.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("BusinessObject.Entity.PrescriptionDetails", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("prescriptionDetails");
                });

            modelBuilder.Entity("BusinessObject.Entity.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BloodPressure")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Pulse")
                        .HasColumnType("int");

                    b.Property<int>("Tempurature")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("BusinessObject.Entity.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("BusinessObject.Entity.ScheduleDetails", b =>
                {
                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleId");

                    b.ToTable("ScheduleDetails");
                });

            modelBuilder.Entity("BusinessObject.Entity.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 812, DateTimeKind.Utc).AddTicks(9635),
                            IsDelete = false,
                            ServiceName = "Normal",
                            ServicePrice = 250000m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 812, DateTimeKind.Utc).AddTicks(9635),
                            IsDelete = false,
                            ServiceName = "MRI scan",
                            ServicePrice = 300000m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 812, DateTimeKind.Utc).AddTicks(9635),
                            IsDelete = false,
                            ServiceName = "General examination",
                            ServicePrice = 500000m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 812, DateTimeKind.Utc).AddTicks(9635),
                            IsDelete = false,
                            ServiceName = "Detect Alzheimer's Disease",
                            ServicePrice = 1000000m
                        });
                });

            modelBuilder.Entity("BusinessObject.Entity.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MriImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Test");
                });

            modelBuilder.Entity("BusinessObject.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "3cd81fdb-6b1b-4b4d-8c4e-3d320dd238fd",
                            AccessFailedCount = 0,
                            Address = "Admin",
                            BirthDay = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "845c95cd-f102-4313-8f15-11dab60a90e9",
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 814, DateTimeKind.Utc).AddTicks(5096),
                            Email = "admin@clinc.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            Gender = 1,
                            Image = "https://media.istockphoto.com/id/476085198/photo/businessman-silhouette-as-avatar-or-default-profile-picture.jpg?s=612x612&w=0&k=20&c=GVYAgYvyLb082gop8rg0XC_wNsu0qupfSLtO7q9wu38=",
                            IsDelete = false,
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@CLINIC.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFLqFehzyV1X7fLgbzf8kAWg76K3AbYTUSCt7bw576CfmXqQ/6z33nGjI6hdWb8a8w==",
                            PhoneNumber = "0909090090",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "bff90d95-536c-4e98-bbfd-89c3b8808ffa",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "6af402af-997c-4a60-8a94-79497cd69f7f",
                            AccessFailedCount = 0,
                            Address = "TP HCM",
                            BirthDay = new DateTime(2001, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ae931439-8a3f-41a9-a005-13abe95d8040",
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 814, DateTimeKind.Utc).AddTicks(5096),
                            Email = "v.thanhphong1712@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Thanh Phong",
                            Gender = 1,
                            Image = "https://media.istockphoto.com/id/476085198/photo/businessman-silhouette-as-avatar-or-default-profile-picture.jpg?s=612x612&w=0&k=20&c=GVYAgYvyLb082gop8rg0XC_wNsu0qupfSLtO7q9wu38=",
                            IsDelete = false,
                            LastName = "Võ",
                            LockoutEnabled = false,
                            NormalizedEmail = "V.THANHPHONG1712@GMAIL.COM",
                            NormalizedUserName = "PHONGVT1712",
                            PasswordHash = "AQAAAAEAACcQAAAAEG4hmqOrITN1aJfWA1LP2p5Q6z5ZjTkITTaPwS6hxkw2WyNj6DWRVhxc5+nFtChW8g==",
                            PhoneNumber = "0769339456",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c1545599-d64b-43b4-949e-ccd3a6b6c20d",
                            TwoFactorEnabled = false,
                            UserName = "phongvt1712"
                        },
                        new
                        {
                            Id = "1454e4a0-ab63-477c-b5d9-b77b35fbd12e",
                            AccessFailedCount = 0,
                            Address = "Cần Thơ",
                            BirthDay = new DateTime(2001, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e23f7935-e31b-41a5-95ad-b1f483a65c3e",
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 814, DateTimeKind.Utc).AddTicks(5096),
                            Email = "hungle@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Quốc Hùng",
                            Gender = 0,
                            Image = "https://media.istockphoto.com/id/476085198/photo/businessman-silhouette-as-avatar-or-default-profile-picture.jpg?s=612x612&w=0&k=20&c=GVYAgYvyLb082gop8rg0XC_wNsu0qupfSLtO7q9wu38=",
                            IsDelete = false,
                            LastName = "Lê",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUNGLE@GMAIL.COM",
                            NormalizedUserName = "HUNGLE",
                            PasswordHash = "AQAAAAEAACcQAAAAEFkIsP5iJH9PrrvtaYmyPnMh5NUP+A0CssFGz/Jl3kP9rEpZr7Mxs+0nVksdO6iZiQ==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "09b494d2-7902-4066-b8f6-e15659480b52",
                            TwoFactorEnabled = false,
                            UserName = "hungle"
                        },
                        new
                        {
                            Id = "9cd9c1a2-6072-44f5-86ad-2cc268e38726",
                            AccessFailedCount = 0,
                            Address = "Bến Tre",
                            BirthDay = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "71a46715-7c09-47d0-b2ca-23ea80ea4b5f",
                            CreatedDate = new DateTime(2022, 12, 28, 9, 53, 13, 814, DateTimeKind.Utc).AddTicks(5096),
                            Email = "hauphan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Công Hậu",
                            Gender = 0,
                            Image = "https://media.istockphoto.com/id/476085198/photo/businessman-silhouette-as-avatar-or-default-profile-picture.jpg?s=612x612&w=0&k=20&c=GVYAgYvyLb082gop8rg0XC_wNsu0qupfSLtO7q9wu38=",
                            IsDelete = false,
                            LastName = "Phan",
                            LockoutEnabled = false,
                            NormalizedEmail = "HAUPHAN@GMAIL.COM",
                            NormalizedUserName = "HAUPHAN",
                            PasswordHash = "AQAAAAEAACcQAAAAENi+Wsc/on+LFow+56if34RcsbyyqOrv1a9J/D+ZfgimqF1ZaKpeLLT9HoGEc7bSgg==",
                            PhoneNumber = "0808080080",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6dd06818-285a-4092-9105-12248aa19e88",
                            TwoFactorEnabled = false,
                            UserName = "hauphan"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "591c0417-6ec3-4fc0-8f8d-00414dd8c517",
                            ConcurrencyStamp = "e59609d6-2ef1-451f-9f95-9cd6ffce2820",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1c292670-1a9b-4db4-bc74-0d184b5d09c6",
                            ConcurrencyStamp = "acd1d9db-7033-47e0-83b2-576f041f5612",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "aeddd5eb-b95e-441d-a383-226ece173aa1",
                            ConcurrencyStamp = "c4d46cbc-22d6-49bf-93d0-74797d06c083",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "70e88fa4-2f21-4038-901e-17a480663b8d",
                            ConcurrencyStamp = "0370dad6-8a4d-422c-9d5c-723f70ba3f05",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("BusinessObject.Entity.Appointment", b =>
                {
                    b.HasOne("BusinessObject.Entity.Doctor", "Doctor")
                        .WithMany("appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObject.Entity.AppointmentDetails", b =>
                {
                    b.HasOne("BusinessObject.Entity.Appointment", "Appointment")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entity.Service", "Service")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BusinessObject.Entity.Doctor", b =>
                {
                    b.HasOne("BusinessObject.Entity.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("BusinessObject.Entity.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entity.Invoice", b =>
                {
                    b.HasOne("BusinessObject.Entity.Appointment", "Appointment")
                        .WithOne("Invoice")
                        .HasForeignKey("BusinessObject.Entity.Invoice", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("BusinessObject.Entity.Nurse", b =>
                {
                    b.HasOne("BusinessObject.Entity.User", "User")
                        .WithOne("Nurse")
                        .HasForeignKey("BusinessObject.Entity.Nurse", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entity.Patient", b =>
                {
                    b.HasOne("BusinessObject.Entity.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("BusinessObject.Entity.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entity.Prescription", b =>
                {
                    b.HasOne("BusinessObject.Entity.Invoice", "Invoice")
                        .WithOne("Prescription")
                        .HasForeignKey("BusinessObject.Entity.Prescription", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entity.Patient", null)
                        .WithMany("prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("BusinessObject.Entity.PrescriptionDetails", b =>
                {
                    b.HasOne("BusinessObject.Entity.Medicine", "Medicine")
                        .WithMany("PrescriptionDetails")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entity.Prescription", "Prescription")
                        .WithMany("PrescriptionDetails")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("BusinessObject.Entity.Queue", b =>
                {
                    b.HasOne("BusinessObject.Entity.Doctor", "Doctor")
                        .WithMany("queues")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entity.Patient", "Patient")
                        .WithMany("queues")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BusinessObject.Entity.Schedule", b =>
                {
                    b.HasOne("BusinessObject.Entity.Doctor", "Doctor")
                        .WithOne("Schedule")
                        .HasForeignKey("BusinessObject.Entity.Schedule", "DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("BusinessObject.Entity.ScheduleDetails", b =>
                {
                    b.HasOne("BusinessObject.Entity.Schedule", "Schedule")
                        .WithMany("ScheduleDetails")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("BusinessObject.Entity.Test", b =>
                {
                    b.HasOne("BusinessObject.Entity.Appointment", "Appointment")
                        .WithOne("Test")
                        .HasForeignKey("BusinessObject.Entity.Test", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObject.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObject.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObject.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Entity.Appointment", b =>
                {
                    b.Navigation("AppointmentDetails");

                    b.Navigation("Invoice");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("BusinessObject.Entity.Doctor", b =>
                {
                    b.Navigation("appointments");

                    b.Navigation("queues");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("BusinessObject.Entity.Invoice", b =>
                {
                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("BusinessObject.Entity.Medicine", b =>
                {
                    b.Navigation("PrescriptionDetails");
                });

            modelBuilder.Entity("BusinessObject.Entity.Patient", b =>
                {
                    b.Navigation("prescriptions");

                    b.Navigation("queues");
                });

            modelBuilder.Entity("BusinessObject.Entity.Prescription", b =>
                {
                    b.Navigation("PrescriptionDetails");
                });

            modelBuilder.Entity("BusinessObject.Entity.Schedule", b =>
                {
                    b.Navigation("ScheduleDetails");
                });

            modelBuilder.Entity("BusinessObject.Entity.Service", b =>
                {
                    b.Navigation("AppointmentDetails");
                });

            modelBuilder.Entity("BusinessObject.Entity.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
